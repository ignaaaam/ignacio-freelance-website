---
import '../styles/global.css';
import { getAlternateUrls } from '../i18n/utils';

interface Props {
	title: string;
	description?: string;
	lang?: 'es' | 'en';
	canonicalUrl?: string;
	image?: string;
}

const { 
	title, 
	description = "Diseño y desarrollo webs modernas, rápidas y optimizadas para destacar a nivel global.",
	lang = 'es',
	canonicalUrl,
	image = "https://ignacioamatweb.com/images/og-image.jpg"
} = Astro.props;

const currentPath = Astro.url.pathname;
const alternateUrls = getAlternateUrls(currentPath);
const baseUrl = 'https://ignacioamatweb.com';
const fullUrl = `${baseUrl}${currentPath}`;
const canonical = canonicalUrl ? `${baseUrl}${canonicalUrl}` : fullUrl;
---

<!DOCTYPE html>
<html lang={lang} data-theme="dark">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		
		<!-- Primary Meta Tags -->
		<title>{title}</title>
		<meta name="title" content={title} />
		<meta name="description" content={description} />
		<link rel="canonical" href={canonical} />

		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta property="og:url" content={fullUrl} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={image} />
		<meta property="og:locale" content={lang === 'es' ? 'es_ES' : 'en_US'} />
		<meta property="og:site_name" content="Ignacio Amat - Freelance Web Developer" />

		<!-- Twitter -->
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content={fullUrl} />
		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<meta property="twitter:image" content={image} />

		<!-- Language and SEO meta tags -->
		<link rel="alternate" hreflang="es" href={`${baseUrl}${alternateUrls.es}`} />
		<link rel="alternate" hreflang="en" href={`${baseUrl}${alternateUrls.en}`} />
		<link rel="alternate" hreflang="x-default" href={`${baseUrl}${alternateUrls.es}`} />

		<!-- Theme color -->
		<meta name="theme-color" content="#0F172A" />
	</head>
	<body>
		<slot />
	</body>
</html>

<style>
	/* Theme transitions */
	:root {
		transition: all 0.3s ease;
	}

	/* Light theme overrides */
	[data-theme="light"] {
		--color-primary: #ffffff;
		--color-secondary: #f1f5f9;
		--color-text: #0f172a;
		--color-text-muted: #64748b;
		--color-border: #e2e8f0;
		--color-card-bg: rgba(241, 245, 249, 0.5);
	}

	/* Language switcher styles */
	.language-switcher {
		position: fixed;
		top: 1rem;
		right: 1rem;
		z-index: 1000;
		background: var(--color-card-bg);
		padding: 0.5rem;
		border-radius: 0.5rem;
		backdrop-filter: blur(10px);
		display: flex;
		gap: 0.5rem;
		align-items: center;
	}

	.language-switcher a {
		color: var(--color-text);
		text-decoration: none;
		font-weight: 500;
		padding: 0.25rem 0.5rem;
		border-radius: 0.25rem;
		transition: all 0.2s ease;
	}

	.language-switcher a:hover {
		background: var(--color-secondary);
	}

	.language-switcher a.active {
		background: var(--color-accent);
		color: white;
	}

	.language-switcher .separator {
		color: var(--color-text-muted);
	}

	/* Glow effects */
	.glow {
		position: absolute;
		border-radius: 50%;
		filter: blur(100px);
		opacity: 0.15;
		pointer-events: none;
	}

	.glow-1 {
		top: 0;
		left: 15%;
		width: 300px;
		height: 300px;
		background: var(--color-accent);
	}

	.glow-2 {
		top: 20%;
		right: 10%;
		width: 400px;
		height: 400px;
		background: #3b82f6;
	}

	[data-theme="light"] .glow {
		opacity: 0.1;
	}
</style>

<script>
	// Theme toggle functionality
	const themeToggle = document.getElementById('theme-toggle');
	const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');
	
	function setTheme(isDark: boolean) {
		document.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');
		localStorage.setItem('theme', isDark ? 'dark' : 'light');
	}

	// Initialize theme
	const savedTheme = localStorage.getItem('theme');
	if (savedTheme) {
		setTheme(savedTheme === 'dark');
	} else {
		setTheme(prefersDark.matches);
	}

	// Listen for theme toggle clicks
	themeToggle?.addEventListener('click', () => {
		const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
		setTheme(!isDark);
	});

	// Listen for system theme changes
	prefersDark.addEventListener('change', (e) => {
		if (!localStorage.getItem('theme')) {
			setTheme(e.matches);
		}
	});

	// Initialize ScrollReveal
	document.addEventListener('DOMContentLoaded', () => {
		const script = document.createElement('script');
		script.src = 'https://unpkg.com/scrollreveal@4.0.9/dist/scrollreveal.min.js';
		script.onload = () => {
			// @ts-ignore
			const sr = window.ScrollReveal({
				origin: 'bottom',
				distance: '60px',
				duration: 1000,
				delay: 200,
				reset: true,
				easing: 'cubic-bezier(0.5, 0, 0, 1)',
			});

			// Reveal elements with data-sr attribute
			document.querySelectorAll('[data-sr]').forEach((el) => {
				sr.reveal(el, {
					delay: el.getAttribute('data-sr-delay') ? parseInt(el.getAttribute('data-sr-delay')!) : 200,
					origin: el.getAttribute('data-sr-origin') || 'bottom',
					distance: el.getAttribute('data-sr-distance') || '60px',
					duration: el.getAttribute('data-sr-duration') ? parseInt(el.getAttribute('data-sr-duration')!) : 1000,
				});
			});
		};
		document.head.appendChild(script);
	});
</script>
