---
import { getLocaleFromPath } from "../i18n/utils";

const locale = getLocaleFromPath(Astro.url.pathname);
---

<section class="py-20" id="contacto">
  <div class="container">
    <div class="text-center mb-16">
      <h2 class="text-3xl font-bold mb-4" data-lang-switch>
        ¿Listo para empezar tu web?
      </h2>
      <p class="text-text-muted" data-lang-switch>
        Cuéntame sobre tu proyecto y te ayudaré a hacerlo realidad.
      </p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-12">
      <div>
        <h3 class="text-xl font-bold mb-4" data-lang-switch>
          Contacto directo
        </h3>
        <div class="space-y-4">
          <div class="flex items-center gap-3">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-6 w-6 text-accent"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
              ></path>
            </svg>
            <a
              href="mailto:contact@ignacioamatweb.com"
              class="hover:text-accent transition-colors"
            >
              ignacioamat@ignathedev.com
            </a>
          </div>
          <div class="flex items-center gap-3">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-6 w-6 text-accent"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
              ></path>
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
            <span>Barcelona, España</span>
          </div>
        </div>

        <div class="mt-8">
          <h3 class="text-xl font-bold mb-4" data-lang-switch>Respuesta</h3>
          <p class="text-text-muted" data-lang-switch>
            Respuesta en 24-48h laborables
          </p>
        </div>
      </div>

      <div>
        <form
          id="contact-form"
          class="space-y-6"
          method="POST"
          onsubmit="handleSubmit(event); return false;"
        >
          <div>
            <label for="name" class="block mb-2" data-lang-switch>Nombre</label>
            <input
              type="text"
              id="name"
              name="name"
              required
              class="w-full px-4 py-2 bg-secondary border border-border rounded-lg focus:outline-none focus:border-accent"
              data-placeholder-es="Tu nombre"
              data-placeholder-en="Your name"
            />
          </div>

          <div>
            <label for="email" class="block mb-2">Email</label>
            <input
              type="email"
              id="email"
              name="email"
              required
              class="w-full px-4 py-2 bg-secondary border border-border rounded-lg focus:outline-none focus:border-accent"
              data-placeholder-es="tu@email.com"
              data-placeholder-en="your@email.com"
            />
          </div>

          <div>
            <label for="type" class="block mb-2" data-lang-switch
              >Tipo de proyecto</label
            >
            <select
              id="type"
              name="type"
              required
              class="w-full px-4 py-2 bg-secondary border border-border rounded-lg focus:outline-none focus:border-accent"
            >
              <option value="" data-lang-switch>Selecciona una opción</option>
              <option value="landing">Landing Page</option>
              <option value="web" data-lang-switch>Web Completa</option>
              <option value="ecommerce" data-lang-switch>Tienda Online</option>
              <option value="other" data-lang-switch>Otro</option>
            </select>
          </div>

          <div>
            <label for="message" class="block mb-2" data-lang-switch
              >Cuéntame sobre tu proyecto</label
            >
            <textarea
              id="message"
              name="message"
              rows="5"
              required
              class="w-full px-4 py-2 bg-secondary border border-border rounded-lg focus:outline-none focus:border-accent"
              data-placeholder-es="Cuéntame sobre tu proyecto..."
              data-placeholder-en="Tell me about your project..."></textarea>
          </div>

          <button type="submit" class="btn-primary w-full" data-lang-switch>
            Enviar mensaje
          </button>
        </form>
      </div>
    </div>
  </div>
</section>

<style>
  input,
  select,
  textarea {
    color: var(--color-text);
  }

  input::placeholder,
  textarea::placeholder {
    color: var(--color-text-muted);
  }

  .text-accent {
    color: var(--color-accent);
  }

  .bg-secondary {
    background-color: var(--color-secondary);
  }

  .border-border {
    border-color: var(--color-border);
  }

  .text-text-muted {
    color: var(--color-text-muted);
  }

  h2,
  h3 {
    font-weight: 800;
  }

  /* Custom toast styles */
  :global(.custom-toast) {
    position: fixed;
    bottom: 20px;
    right: 20px;
    padding: 12px 16px;
    border-radius: 8px;
    color: white;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    z-index: 9999;
    opacity: 0;
    transform: translateY(20px);
    transition:
      opacity 0.3s,
      transform 0.3s;
    display: flex;
    align-items: center;
    gap: 8px;
    max-width: 320px;
  }

  :global(.toast-success) {
    background-color: #10b981;
  }

  :global(.toast-error) {
    background-color: #ef4444;
  }

  :global(.toast-visible) {
    opacity: 1;
    transform: translateY(0);
  }

  :global(.toast-icon) {
    flex-shrink: 0;
    width: 20px;
    height: 20px;
  }

  :global(.toast-content) {
    flex-grow: 1;
  }

  :global(.toast-title) {
    font-weight: 600;
    margin-bottom: 4px;
  }

  :global(.toast-message) {
    font-size: 14px;
    opacity: 0.9;
  }
</style>

<script is:inline>
  // Get current locale for client-side translations
  const locale = window.location.pathname.startsWith("/en") ? "en" : "es";

  // Add translations for language elements
  if (locale === "en") {
    // Apply English translations
    document.querySelectorAll("[data-lang-switch]").forEach((el) => {
      switch (el.textContent.trim()) {
        case "¿Listo para empezar tu web?":
          el.textContent = "Ready to start your website?";
          break;
        case "Cuéntame sobre tu proyecto y te ayudaré a hacerlo realidad.":
          el.textContent =
            "Tell me about your project and I will help you make it happen.";
          break;
        case "Contacto directo":
          el.textContent = "Direct contact";
          break;
        case "Respuesta":
          el.textContent = "Response";
          break;
        case "Respuesta en 24-48h laborables":
          el.textContent = "Response within 24-48h business days";
          break;
        case "Nombre":
          el.textContent = "Name";
          break;
        case "Tipo de proyecto":
          el.textContent = "Project type";
          break;
        case "Selecciona una opción":
          el.textContent = "Select an option";
          break;
        case "Web Completa":
          el.textContent = "Complete Website";
          break;
        case "Tienda Online":
          el.textContent = "Online Store";
          break;
        case "Otro":
          el.textContent = "Other";
          break;
        case "Cuéntame sobre tu proyecto":
          el.textContent = "Tell me about your project";
          break;
        case "Enviar mensaje":
          el.textContent = "Send message";
          break;
      }
    });

    // Apply placeholders for inputs
    document.querySelectorAll("[data-placeholder-en]").forEach((el) => {
      el.placeholder = el.getAttribute("data-placeholder-en");
    });
  } else {
    // Apply Spanish placeholders
    document.querySelectorAll("[data-placeholder-es]").forEach((el) => {
      el.placeholder = el.getAttribute("data-placeholder-es");
    });
  }

  // Custom toast implementation to ensure it works reliably
  function showToast(type, title, message, duration = 5000) {
    // Remove any existing toast
    const existingToast = document.querySelector(".custom-toast");
    if (existingToast) {
      existingToast.remove();
    }

    // Create toast container
    const toast = document.createElement("div");
    toast.className = `custom-toast toast-${type}`;

    // Create icon based on type
    const icon = document.createElement("div");
    icon.className = "toast-icon";

    if (type === "success") {
      icon.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
          <path d="M20.285 2l-11.285 11.567-5.286-5.011-3.714 3.716 9 8.728 15-15.285z"/>
        </svg>
      `;
    } else {
      icon.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
          <path d="M24 20.188l-8.315-8.209 8.2-8.282-3.697-3.697-8.212 8.318-8.31-8.203-3.666 3.666 8.321 8.24-8.206 8.313 3.666 3.666 8.237-8.318 8.285 8.203z"/>
        </svg>
      `;
    }

    // Create content container
    const content = document.createElement("div");
    content.className = "toast-content";

    // Add title if provided
    if (title) {
      const titleEl = document.createElement("div");
      titleEl.className = "toast-title";
      titleEl.textContent = title;
      content.appendChild(titleEl);
    }

    // Add message
    const messageEl = document.createElement("div");
    messageEl.className = "toast-message";
    messageEl.textContent = message;
    content.appendChild(messageEl);

    // Build the toast
    toast.appendChild(icon);
    toast.appendChild(content);

    // Add to document
    document.body.appendChild(toast);

    // Show the toast (trigger animation)
    setTimeout(() => {
      toast.classList.add("toast-visible");
    }, 10);

    // Auto-remove after duration
    setTimeout(() => {
      toast.classList.remove("toast-visible");
      setTimeout(() => {
        toast.remove();
      }, 300);
    }, duration);
  }

  // Global function to handle form submission
  async function handleSubmit(event) {
    event.preventDefault();
    console.log("Form submit intercepted");

    const form = document.getElementById("contact-form");
    const submitButton = form.querySelector('button[type="submit"]');

    if (!form || !submitButton) {
      console.error("Form or submit button not found");
      return;
    }

    submitButton.disabled = true;
    submitButton.textContent = locale === "es" ? "Enviando..." : "Sending...";

    try {
      const formData = new FormData(form);
      const data = {};
      formData.forEach((value, key) => {
        data[key] = value;
      });

      // Add locale to form data
      data.locale = locale;

      console.log("Form data:", data);

      // Validate required fields
      if (!data.name || !data.email || !data.message) {
        showToast(
          "error",
          locale === "es" ? "Error" : "Error",
          locale === "es"
            ? "Por favor, rellena todos los campos requeridos."
            : "Please fill in all required fields."
        );
        submitButton.disabled = false;
        submitButton.textContent =
          locale === "es" ? "Enviar mensaje" : "Send message";
        return;
      }

      console.log("Sending request to /api/contact...");
      const response = await fetch("/api/contact", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        body: JSON.stringify(data),
      });

      console.log("Response status:", response.status);
      const result = await response.json();
      console.log("Response data:", result);

      if (response.ok) {
        showToast(
          "success",
          locale === "es" ? "Éxito" : "Success",
          locale === "es"
            ? result.message ||
                "Mensaje enviado correctamente. Me pondré en contacto contigo pronto."
            : result.message ||
                "Message sent successfully. I will get in touch with you soon."
        );
        form.reset();
      } else {
        throw new Error(
          result.error ||
            (locale === "es"
              ? "Error al enviar el mensaje"
              : "Error sending the message")
        );
      }
    } catch (error) {
      console.error("Form submission error:", error);
      showToast(
        "error",
        locale === "es" ? "Error" : "Error",
        locale === "es"
          ? error.message ||
              "Error al enviar el mensaje. Por favor, inténtalo de nuevo más tarde."
          : error.message ||
              "Error sending the message. Please try again later."
      );
    } finally {
      submitButton.disabled = false;
      submitButton.textContent =
        locale === "es" ? "Enviar mensaje" : "Send message";
    }
  }
</script>
