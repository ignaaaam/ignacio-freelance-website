---
interface Props {
  lang?: "es" | "en";
}

const { lang = "es" } = Astro.props;
---

<!-- Tawk.to Script -->
<script>
  // @ts-ignore
  var Tawk_API = Tawk_API || {},
    Tawk_LoadStart = new Date();
  (function () {
    var s1 = document.createElement("script"),
      s0 = document.getElementsByTagName("script")[0];
    s1.async = true;
    s1.src = "https://embed.tawk.to/684cce294aea20190b6349ea/1itm0akhd";
    s1.setAttribute("crossorigin", "*");
    if (s0 && s0.parentNode) {
      s0.parentNode.insertBefore(s1, s0);
    } else {
      document.head.appendChild(s1);
    }
  })();
</script>

<!-- Custom Chat Button -->
<button
  id="customChatButton"
  class="fixed bottom-6 right-6 z-50 bg-accent text-white p-4 rounded-full shadow-lg hover:bg-accent/90 transition-colors"
  aria-label={lang === "es" ? "Abrir chat" : "Open chat"}
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="h-6 w-6"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"
    ></path>
  </svg>
</button>

<script>
  // Wait for Tawk_API to be available before using it
  function onTawkReady(callback: () => void) {
    if (
      (window as any).Tawk_API &&
      typeof (window as any).Tawk_API.maximize === "function"
    ) {
      callback();
    } else {
      setTimeout(() => onTawkReady(callback), 300);
    }
  }

  const customButton = document.getElementById("customChatButton");
  customButton?.addEventListener("click", () => {
    onTawkReady(() => {
      (window as any).Tawk_API.maximize();
    });
  });

  // Optionally hide the default Tawk.to button when ready
  onTawkReady(() => {
    (window as any).Tawk_API.hideWidget();
  });
</script>
